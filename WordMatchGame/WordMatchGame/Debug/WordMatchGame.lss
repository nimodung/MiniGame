
WordMatchGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e2  00800100  00000d68  00000dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  008001e2  008001e2  00000ede  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a5a  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf6  00000000  00000000  00002b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fdf  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  000047f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073f  00000000  00000000  00004b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f1d  00000000  00000000  000052cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000061ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3e       	cpi	r26, 0xE2	; 226
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 ee       	ldi	r26, 0xE2	; 226
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <main>
  9e:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FND_shift_out>:
	FND[0] = FND4digit_font[msec /10 % 10];
	FND[1] = FND4digit_font[msec /100 % 10];
	FND[2] = FND4digit_font[sec % 10] & (~(1<< FND_p));
	FND[3] = FND4digit_font[sec /10 % 10];
	return;
}
  a6:	44 98       	cbi	0x08, 4	; 8
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	68 2f       	mov	r22, r24
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	45 98       	cbi	0x08, 5	; 8
  b2:	43 98       	cbi	0x08, 3	; 8
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	9b 01       	movw	r18, r22
  b8:	04 2e       	mov	r0, r20
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <FND_shift_out+0x1a>
  bc:	35 95       	asr	r19
  be:	27 95       	ror	r18
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <FND_shift_out+0x16>
  c4:	21 70       	andi	r18, 0x01	; 1
  c6:	33 27       	eor	r19, r19
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	29 2b       	or	r18, r25
  d6:	28 b9       	out	0x08, r18	; 8
  d8:	45 9a       	sbi	0x08, 5	; 8
  da:	4f 5f       	subi	r20, 0xFF	; 255
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
  de:	48 30       	cpi	r20, 0x08	; 8
  e0:	51 05       	cpc	r21, r1
  e2:	31 f7       	brne	.-52     	; 0xb0 <FND_shift_out+0xa>
  e4:	44 9a       	sbi	0x08, 4	; 8
  e6:	08 95       	ret

000000e8 <FND_update_value>:
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
  ee:	e5 ee       	ldi	r30, 0xE5	; 229
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	2a e0       	ldi	r18, 0x0A	; 10
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	b9 01       	movw	r22, r18
  f8:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__divmodhi4>
  fc:	dc 01       	movw	r26, r24
  fe:	ae 5d       	subi	r26, 0xDE	; 222
 100:	be 4f       	sbci	r27, 0xFE	; 254
 102:	8c 91       	ld	r24, X
 104:	80 83       	st	Z, r24
 106:	cb 01       	movw	r24, r22
 108:	b9 01       	movw	r22, r18
 10a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__divmodhi4>
 10e:	dc 01       	movw	r26, r24
 110:	ae 5d       	subi	r26, 0xDE	; 222
 112:	be 4f       	sbci	r27, 0xFE	; 254
 114:	8c 91       	ld	r24, X
 116:	81 83       	std	Z+1, r24	; 0x01
 118:	ce 01       	movw	r24, r28
 11a:	64 e6       	ldi	r22, 0x64	; 100
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__divmodhi4>
 122:	cb 01       	movw	r24, r22
 124:	b9 01       	movw	r22, r18
 126:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__divmodhi4>
 12a:	dc 01       	movw	r26, r24
 12c:	ae 5d       	subi	r26, 0xDE	; 222
 12e:	be 4f       	sbci	r27, 0xFE	; 254
 130:	8c 91       	ld	r24, X
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	82 83       	std	Z+2, r24	; 0x02
 136:	ce 01       	movw	r24, r28
 138:	68 ee       	ldi	r22, 0xE8	; 232
 13a:	73 e0       	ldi	r23, 0x03	; 3
 13c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__divmodhi4>
 140:	cb 01       	movw	r24, r22
 142:	b9 01       	movw	r22, r18
 144:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__divmodhi4>
 148:	dc 01       	movw	r26, r24
 14a:	ae 5d       	subi	r26, 0xDE	; 222
 14c:	be 4f       	sbci	r27, 0xFE	; 254
 14e:	8c 91       	ld	r24, X
 150:	83 83       	std	Z+3, r24	; 0x03
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <FND4digit_init_shiftR>:
 158:	8a b1       	in	r24, 0x0a	; 10
 15a:	80 6f       	ori	r24, 0xF0	; 240
 15c:	8a b9       	out	0x0a, r24	; 10
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	8b b9       	out	0x0b, r24	; 11
 164:	87 b1       	in	r24, 0x07	; 7
 166:	88 63       	ori	r24, 0x38	; 56
 168:	87 b9       	out	0x07, r24	; 7
 16a:	44 9a       	sbi	0x08, 4	; 8
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 74 00 	call	0xe8	; 0xe8 <FND_update_value>
 174:	08 95       	ret

00000176 <FND_clock>:

void FND_clock(char sec, char min)
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	FND[0] = FND4digit_font[sec % 10];
 17a:	a5 ee       	ldi	r26, 0xE5	; 229
 17c:	b1 e0       	ldi	r27, 0x01	; 1
 17e:	9d ec       	ldi	r25, 0xCD	; 205
 180:	89 9f       	mul	r24, r25
 182:	e1 2d       	mov	r30, r1
 184:	11 24       	eor	r1, r1
 186:	e6 95       	lsr	r30
 188:	e6 95       	lsr	r30
 18a:	e6 95       	lsr	r30
 18c:	3e 2f       	mov	r19, r30
 18e:	33 0f       	add	r19, r19
 190:	23 2f       	mov	r18, r19
 192:	22 0f       	add	r18, r18
 194:	22 0f       	add	r18, r18
 196:	23 0f       	add	r18, r19
 198:	82 1b       	sub	r24, r18
 19a:	c8 2f       	mov	r28, r24
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	ce 5d       	subi	r28, 0xDE	; 222
 1a0:	de 4f       	sbci	r29, 0xFE	; 254
 1a2:	88 81       	ld	r24, Y
 1a4:	8c 93       	st	X, r24
	FND[1] = FND4digit_font[sec /10 % 10];
 1a6:	e9 9f       	mul	r30, r25
 1a8:	81 2d       	mov	r24, r1
 1aa:	11 24       	eor	r1, r1
 1ac:	86 95       	lsr	r24
 1ae:	86 95       	lsr	r24
 1b0:	86 95       	lsr	r24
 1b2:	88 0f       	add	r24, r24
 1b4:	28 2f       	mov	r18, r24
 1b6:	22 0f       	add	r18, r18
 1b8:	22 0f       	add	r18, r18
 1ba:	82 0f       	add	r24, r18
 1bc:	e8 1b       	sub	r30, r24
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 5d       	subi	r30, 0xDE	; 222
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	80 81       	ld	r24, Z
 1c6:	11 96       	adiw	r26, 0x01	; 1
 1c8:	8c 93       	st	X, r24
 1ca:	11 97       	sbiw	r26, 0x01	; 1
	FND[2] = FND4digit_font[min % 10] & (~(1<< FND_p));
 1cc:	69 9f       	mul	r22, r25
 1ce:	e1 2d       	mov	r30, r1
 1d0:	11 24       	eor	r1, r1
 1d2:	e6 95       	lsr	r30
 1d4:	e6 95       	lsr	r30
 1d6:	e6 95       	lsr	r30
 1d8:	2e 2f       	mov	r18, r30
 1da:	22 0f       	add	r18, r18
 1dc:	82 2f       	mov	r24, r18
 1de:	88 0f       	add	r24, r24
 1e0:	88 0f       	add	r24, r24
 1e2:	82 0f       	add	r24, r18
 1e4:	68 1b       	sub	r22, r24
 1e6:	c6 2f       	mov	r28, r22
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
 1ea:	ce 5d       	subi	r28, 0xDE	; 222
 1ec:	de 4f       	sbci	r29, 0xFE	; 254
 1ee:	88 81       	ld	r24, Y
 1f0:	8e 7f       	andi	r24, 0xFE	; 254
 1f2:	12 96       	adiw	r26, 0x02	; 2
 1f4:	8c 93       	st	X, r24
 1f6:	12 97       	sbiw	r26, 0x02	; 2
	FND[3] = FND4digit_font[min /10 % 10];
 1f8:	e9 9f       	mul	r30, r25
 1fa:	91 2d       	mov	r25, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	96 95       	lsr	r25
 200:	96 95       	lsr	r25
 202:	96 95       	lsr	r25
 204:	99 0f       	add	r25, r25
 206:	89 2f       	mov	r24, r25
 208:	88 0f       	add	r24, r24
 20a:	88 0f       	add	r24, r24
 20c:	98 0f       	add	r25, r24
 20e:	e9 1b       	sub	r30, r25
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ee 5d       	subi	r30, 0xDE	; 222
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	80 81       	ld	r24, Z
 218:	13 96       	adiw	r26, 0x03	; 3
 21a:	8c 93       	st	X, r24
	return;
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <Keypad_init>:
#include "Keypad.h"


void Keypad_init(void)
{
	Keypad_PORT_DDR |= 0b00001111; //포트D 상위 4bit 출력으로 설정
 222:	8a b1       	in	r24, 0x0a	; 10
 224:	8f 60       	ori	r24, 0x0F	; 15
 226:	8a b9       	out	0x0a, r24	; 10
	Keypad_PORT |= 0b00001111; // 상위 4bit 끄고 시작(풀업저항)
 228:	8b b1       	in	r24, 0x0b	; 11
 22a:	8f 60       	ori	r24, 0x0F	; 15
 22c:	8b b9       	out	0x0b, r24	; 11
	
	Keypad_PIN_DDR &= 0b11000011; //포트B 하위 4bit 입력으로 설정
 22e:	84 b1       	in	r24, 0x04	; 4
 230:	83 7c       	andi	r24, 0xC3	; 195
 232:	84 b9       	out	0x04, r24	; 4
	Keypad_PIN_PORT |= 0b00111100;
 234:	85 b1       	in	r24, 0x05	; 5
 236:	8c 63       	ori	r24, 0x3C	; 60
 238:	85 b9       	out	0x05, r24	; 5
 23a:	08 95       	ret

0000023c <Keyscan_sub>:
	return;
}

char Keyscan_sub(void)
{
	if(!(Keypad_PIN & 0b00000100)) return 1; //키가 눌렸을때
 23c:	1a 9b       	sbis	0x03, 2	; 3
 23e:	08 c0       	rjmp	.+16     	; 0x250 <Keyscan_sub+0x14>
	else if(!(Keypad_PIN & 0b00001000)) return 2;
 240:	1b 9b       	sbis	0x03, 3	; 3
 242:	08 c0       	rjmp	.+16     	; 0x254 <Keyscan_sub+0x18>
	else if(!(Keypad_PIN & 0b00010000)) return 3;
 244:	1c 9b       	sbis	0x03, 4	; 3
 246:	08 c0       	rjmp	.+16     	; 0x258 <Keyscan_sub+0x1c>
	else if(!(Keypad_PIN & 0b00100000)) return 4;
 248:	1d 9b       	sbis	0x03, 5	; 3
 24a:	08 c0       	rjmp	.+16     	; 0x25c <Keyscan_sub+0x20>
	else return 0;
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	08 95       	ret
	return;
}

char Keyscan_sub(void)
{
	if(!(Keypad_PIN & 0b00000100)) return 1; //키가 눌렸을때
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	08 95       	ret
	else if(!(Keypad_PIN & 0b00001000)) return 2;
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	08 95       	ret
	else if(!(Keypad_PIN & 0b00010000)) return 3;
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	08 95       	ret
	else if(!(Keypad_PIN & 0b00100000)) return 4;
 25c:	84 e0       	ldi	r24, 0x04	; 4
	else return 0;
}
 25e:	08 95       	ret

00000260 <Keyscan>:

char Keyscan(void)
{
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
	for(int i = 0; i < 4; i++)
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Keypad_PORT |= 0b00001111;
		Keypad_PORT &= ~(0b00001000 >> i); 
 26c:	08 e0       	ldi	r16, 0x08	; 8
 26e:	10 e0       	ldi	r17, 0x00	; 0

char Keyscan(void)
{
	for(int i = 0; i < 4; i++)
	{
		Keypad_PORT |= 0b00001111;
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	8f 60       	ori	r24, 0x0F	; 15
 274:	8b b9       	out	0x0b, r24	; 11
		Keypad_PORT &= ~(0b00001000 >> i); 
 276:	9b b1       	in	r25, 0x0b	; 11
 278:	98 01       	movw	r18, r16
 27a:	0c 2e       	mov	r0, r28
 27c:	02 c0       	rjmp	.+4      	; 0x282 <Keyscan+0x22>
 27e:	35 95       	asr	r19
 280:	27 95       	ror	r18
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <Keyscan+0x1e>
 286:	82 2f       	mov	r24, r18
 288:	80 95       	com	r24
 28a:	89 23       	and	r24, r25
 28c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	85 e0       	ldi	r24, 0x05	; 5
 290:	8a 95       	dec	r24
 292:	f1 f7       	brne	.-4      	; 0x290 <Keyscan+0x30>
 294:	00 00       	nop
		_delay_us(1);
		if(Keyscan_sub()) return 'A' + Keyscan_sub() + (i*4);
 296:	0e 94 1e 01 	call	0x23c	; 0x23c <Keyscan_sub>
 29a:	88 23       	and	r24, r24
 29c:	39 f0       	breq	.+14     	; 0x2ac <Keyscan+0x4c>
 29e:	0e 94 1e 01 	call	0x23c	; 0x23c <Keyscan_sub>
 2a2:	8f 5b       	subi	r24, 0xBF	; 191
 2a4:	cc 0f       	add	r28, r28
 2a6:	cc 0f       	add	r28, r28
 2a8:	8c 0f       	add	r24, r28
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <Keyscan+0x56>
	else return 0;
}

char Keyscan(void)
{
	for(int i = 0; i < 4; i++)
 2ac:	21 96       	adiw	r28, 0x01	; 1
 2ae:	c4 30       	cpi	r28, 0x04	; 4
 2b0:	d1 05       	cpc	r29, r1
 2b2:	f1 f6       	brne	.-68     	; 0x270 <Keyscan+0x10>
		Keypad_PORT &= ~(0b00001000 >> i); 
		_delay_us(1);
		if(Keyscan_sub()) return 'A' + Keyscan_sub() + (i*4);
	}
	
	return 'A'; //아무것도 눌리지 않았음
 2b4:	81 e4       	ldi	r24, 0x41	; 65
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	08 95       	ret

000002c0 <Card_shuffle>:
		}
		_delay_ms(10);
    }
}

void Card_shuffle(void){
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	6a ef       	ldi	r22, 0xFA	; 250
 2d2:	71 e0       	ldi	r23, 0x01	; 1
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	e9 01       	movw	r28, r18
 2da:	c7 51       	subi	r28, 0x17	; 23
 2dc:	de 4f       	sbci	r29, 0xFE	; 254
 2de:	a9 01       	movw	r20, r18
 2e0:	4c 5f       	subi	r20, 0xFC	; 252
 2e2:	5f 4f       	sbci	r21, 0xFF	; 255
 2e4:	db 01       	movw	r26, r22
	
	char random_x1,random_x2,random_y1,random_y2;
	char *temp_card;
	for(y = 0; y < 4; y++) {
		for(x = 0; x < 4; x++) {
			word_card[y][x] = words[(x + y * 4)/2];
 2e6:	c9 01       	movw	r24, r18
 2e8:	33 23       	and	r19, r19
 2ea:	0c f4       	brge	.+2      	; 0x2ee <Card_shuffle+0x2e>
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	8e 7f       	andi	r24, 0xFE	; 254
 2f0:	fc 01       	movw	r30, r24
 2f2:	e1 5c       	subi	r30, 0xC1	; 193
 2f4:	fe 4f       	sbci	r31, 0xFE	; 254
 2f6:	80 81       	ld	r24, Z
 2f8:	91 81       	ldd	r25, Z+1	; 0x01
 2fa:	8d 93       	st	X+, r24
 2fc:	9d 93       	st	X+, r25
			state_card[y][x] = NOT_MATCH;
 2fe:	19 92       	st	Y+, r1
 300:	2f 5f       	subi	r18, 0xFF	; 255
 302:	3f 4f       	sbci	r19, 0xFF	; 255
void Card_shuffle(void){
	
	char random_x1,random_x2,random_y1,random_y2;
	char *temp_card;
	for(y = 0; y < 4; y++) {
		for(x = 0; x < 4; x++) {
 304:	24 17       	cp	r18, r20
 306:	35 07       	cpc	r19, r21
 308:	71 f7       	brne	.-36     	; 0x2e6 <Card_shuffle+0x26>
 30a:	68 5f       	subi	r22, 0xF8	; 248
 30c:	7f 4f       	sbci	r23, 0xFF	; 255
 30e:	9a 01       	movw	r18, r20

void Card_shuffle(void){
	
	char random_x1,random_x2,random_y1,random_y2;
	char *temp_card;
	for(y = 0; y < 4; y++) {
 310:	40 31       	cpi	r20, 0x10	; 16
 312:	51 05       	cpc	r21, r1
 314:	09 f7       	brne	.-62     	; 0x2d8 <Card_shuffle+0x18>
 316:	84 e0       	ldi	r24, 0x04	; 4
 318:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <x>
 31c:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <y>
		for(x = 0; x < 4; x++) {
			word_card[y][x] = words[(x + y * 4)/2];
			state_card[y][x] = NOT_MATCH;
		}
	}
	srandom(msec);
 320:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <msec>
 324:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <msec+0x1>
 328:	0e 94 5f 06 	call	0xcbe	; 0xcbe <srandom>
 32c:	c4 e6       	ldi	r28, 0x64	; 100
 32e:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i<100; i++)
	{
		random_x1 = random()%4;
 330:	0e 94 11 06 	call	0xc22	; 0xc22 <random>
 334:	7c 01       	movw	r14, r24
		random_y1 = random()%4;
 336:	0e 94 11 06 	call	0xc22	; 0xc22 <random>
 33a:	6c 01       	movw	r12, r24
		random_x2 = random()%4;
 33c:	0e 94 11 06 	call	0xc22	; 0xc22 <random>
 340:	8c 01       	movw	r16, r24
		random_y2 = random()%4;
 342:	0e 94 11 06 	call	0xc22	; 0xc22 <random>
 346:	a6 01       	movw	r20, r12
 348:	43 70       	andi	r20, 0x03	; 3
 34a:	50 78       	andi	r21, 0x80	; 128
 34c:	55 23       	and	r21, r21
 34e:	34 f4       	brge	.+12     	; 0x35c <Card_shuffle+0x9c>
 350:	41 50       	subi	r20, 0x01	; 1
 352:	51 09       	sbc	r21, r1
 354:	4c 6f       	ori	r20, 0xFC	; 252
 356:	5f 6f       	ori	r21, 0xFF	; 255
 358:	4f 5f       	subi	r20, 0xFF	; 255
 35a:	5f 4f       	sbci	r21, 0xFF	; 255
 35c:	55 27       	eor	r21, r21
 35e:	97 01       	movw	r18, r14
 360:	23 70       	andi	r18, 0x03	; 3
 362:	30 78       	andi	r19, 0x80	; 128
 364:	33 23       	and	r19, r19
 366:	34 f4       	brge	.+12     	; 0x374 <Card_shuffle+0xb4>
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	31 09       	sbc	r19, r1
 36c:	2c 6f       	ori	r18, 0xFC	; 252
 36e:	3f 6f       	ori	r19, 0xFF	; 255
 370:	2f 5f       	subi	r18, 0xFF	; 255
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	33 27       	eor	r19, r19
		temp_card = word_card[random_y1][random_x1];
 376:	fa 01       	movw	r30, r20
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	e2 0f       	add	r30, r18
 382:	f3 1f       	adc	r31, r19
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	e6 50       	subi	r30, 0x06	; 6
 38a:	fe 4f       	sbci	r31, 0xFE	; 254
 38c:	60 81       	ld	r22, Z
 38e:	71 81       	ldd	r23, Z+1	; 0x01
 390:	83 70       	andi	r24, 0x03	; 3
 392:	90 78       	andi	r25, 0x80	; 128
 394:	99 23       	and	r25, r25
 396:	24 f4       	brge	.+8      	; 0x3a0 <Card_shuffle+0xe0>
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	8c 6f       	ori	r24, 0xFC	; 252
 39c:	9f 6f       	ori	r25, 0xFF	; 255
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	fc 01       	movw	r30, r24
 3a2:	ff 27       	eor	r31, r31
 3a4:	03 70       	andi	r16, 0x03	; 3
 3a6:	10 78       	andi	r17, 0x80	; 128
 3a8:	11 23       	and	r17, r17
 3aa:	34 f4       	brge	.+12     	; 0x3b8 <Card_shuffle+0xf8>
 3ac:	01 50       	subi	r16, 0x01	; 1
 3ae:	11 09       	sbc	r17, r1
 3b0:	0c 6f       	ori	r16, 0xFC	; 252
 3b2:	1f 6f       	ori	r17, 0xFF	; 255
 3b4:	0f 5f       	subi	r16, 0xFF	; 255
 3b6:	1f 4f       	sbci	r17, 0xFF	; 255
		word_card[random_y1][random_x1] = word_card[random_y2][random_x2];
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	ee 0f       	add	r30, r30
 3be:	ff 1f       	adc	r31, r31
 3c0:	e0 0f       	add	r30, r16
 3c2:	f1 1d       	adc	r31, r1
 3c4:	ee 0f       	add	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	e6 50       	subi	r30, 0x06	; 6
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	80 81       	ld	r24, Z
 3ce:	91 81       	ldd	r25, Z+1	; 0x01
 3d0:	da 01       	movw	r26, r20
 3d2:	aa 0f       	add	r26, r26
 3d4:	bb 1f       	adc	r27, r27
 3d6:	aa 0f       	add	r26, r26
 3d8:	bb 1f       	adc	r27, r27
 3da:	a2 0f       	add	r26, r18
 3dc:	b3 1f       	adc	r27, r19
 3de:	aa 0f       	add	r26, r26
 3e0:	bb 1f       	adc	r27, r27
 3e2:	a6 50       	subi	r26, 0x06	; 6
 3e4:	be 4f       	sbci	r27, 0xFE	; 254
 3e6:	8d 93       	st	X+, r24
 3e8:	9c 93       	st	X, r25
		word_card[random_y2][random_x2] = temp_card;
 3ea:	71 83       	std	Z+1, r23	; 0x01
 3ec:	60 83       	st	Z, r22
 3ee:	21 97       	sbiw	r28, 0x01	; 1
			word_card[y][x] = words[(x + y * 4)/2];
			state_card[y][x] = NOT_MATCH;
		}
	}
	srandom(msec);
	for(int i = 0; i<100; i++)
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <Card_shuffle+0x134>
 3f2:	9e cf       	rjmp	.-196    	; 0x330 <Card_shuffle+0x70>
		temp_card = word_card[random_y1][random_x1];
		word_card[random_y1][random_x1] = word_card[random_y2][random_x2];
		word_card[random_y2][random_x2] = temp_card;
	}
	return;
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	08 95       	ret

00000406 <Ready_process>:

void Ready_process(char key_value)
{
	Card_shuffle();
 406:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Card_shuffle>
	game_state = GAME;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <game_state>
	time_reset_flag = 1;
 410:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <time_reset_flag>
	time_print_flag = 1;
 414:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <time_print_flag>
	FND_reflash_flag = 1;
 418:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <FND_reflash_flag>
	Keysound();
 41c:	0e 94 28 04 	call	0x850	; 0x850 <Keysound>
 420:	08 95       	ret

00000422 <End_process>:
	return;
}

void End_process(char key_value)
{
	game_state = READY;
 422:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <game_state>
	speakout_flag = 0;
 426:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <speakout_flag>
	music_i = 0;
 42a:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <music_i+0x1>
 42e:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <music_i>
	interval = 0;
 432:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <interval+0x1>
 436:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <interval>
	next_beat_flag = 0;
 43a:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <next_beat_flag>
	OCR1A = 0;
 43e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 442:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	FND_reflash_flag = 1;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <FND_reflash_flag>
 44c:	08 95       	ret

0000044e <print_FND_word>:
	}
	
	return;
}

void print_FND_word(char *word) {
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	ec 01       	movw	r28, r24
 454:	a5 ee       	ldi	r26, 0xE5	; 229
 456:	b1 e0       	ldi	r27, 0x01	; 1
 458:	21 ee       	ldi	r18, 0xE1	; 225
 45a:	31 e0       	ldi	r19, 0x01	; 1
	
	for(int i = 0; i < 4; i++) {
		if('A' <=*(word+i) && *(word+i) <= 'Z')
			FND[3-i] = FND4digit_font_alphabet[*(word+i)- 'A'];
		else FND[3-i] = 0xff;
 45c:	9f ef       	ldi	r25, 0xFF	; 255
}

void print_FND_word(char *word) {
	
	for(int i = 0; i < 4; i++) {
		if('A' <=*(word+i) && *(word+i) <= 'Z')
 45e:	e9 91       	ld	r30, Y+
 460:	8f eb       	ldi	r24, 0xBF	; 191
 462:	8e 0f       	add	r24, r30
 464:	8a 31       	cpi	r24, 0x1A	; 26
 466:	40 f4       	brcc	.+16     	; 0x478 <print_FND_word+0x2a>
			FND[3-i] = FND4digit_font_alphabet[*(word+i)- 'A'];
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	e9 53       	subi	r30, 0x39	; 57
 46c:	ff 4f       	sbci	r31, 0xFF	; 255
 46e:	80 81       	ld	r24, Z
 470:	13 96       	adiw	r26, 0x03	; 3
 472:	8c 93       	st	X, r24
 474:	13 97       	sbiw	r26, 0x03	; 3
 476:	03 c0       	rjmp	.+6      	; 0x47e <print_FND_word+0x30>
		else FND[3-i] = 0xff;
 478:	13 96       	adiw	r26, 0x03	; 3
 47a:	9c 93       	st	X, r25
 47c:	13 97       	sbiw	r26, 0x03	; 3
 47e:	11 97       	sbiw	r26, 0x01	; 1
	return;
}

void print_FND_word(char *word) {
	
	for(int i = 0; i < 4; i++) {
 480:	a2 17       	cp	r26, r18
 482:	b3 07       	cpc	r27, r19
 484:	61 f7       	brne	.-40     	; 0x45e <print_FND_word+0x10>
			FND[3-i] = FND4digit_font_alphabet[*(word+i)- 'A'];
		else FND[3-i] = 0xff;
	}
	
	return;
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <Game_process>:
	FND_reflash_flag = 1;
	Keysound();
	return;
}

void Game_process(char key_value) {
 48c:	cf 92       	push	r12
 48e:	df 92       	push	r13
 490:	ef 92       	push	r14
 492:	ff 92       	push	r15
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
	
	//key_value를 이용해서 키패드 배열의 위치값 찾기
	y = (key_value - 'A' - 1)/4;
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	82 54       	subi	r24, 0x42	; 66
 4a0:	91 09       	sbc	r25, r1
 4a2:	fc 01       	movw	r30, r24
 4a4:	0a f4       	brpl	.+2      	; 0x4a8 <Game_process+0x1c>
 4a6:	33 96       	adiw	r30, 0x03	; 3
 4a8:	f5 95       	asr	r31
 4aa:	e7 95       	ror	r30
 4ac:	f5 95       	asr	r31
 4ae:	e7 95       	ror	r30
 4b0:	3e 2f       	mov	r19, r30
 4b2:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <y>
	x = (key_value - 'A' - 1)%4;
 4b6:	83 70       	andi	r24, 0x03	; 3
 4b8:	90 78       	andi	r25, 0x80	; 128
 4ba:	99 23       	and	r25, r25
 4bc:	24 f4       	brge	.+8      	; 0x4c6 <Game_process+0x3a>
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	8c 6f       	ori	r24, 0xFC	; 252
 4c2:	9f 6f       	ori	r25, 0xFF	; 255
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	48 2f       	mov	r20, r24
 4c8:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <x>
 4cc:	ff 27       	eor	r31, r31
 4ce:	99 27       	eor	r25, r25
	
	if(state_card[y][x] == MATCH || ((first_y == y) && (first_x == x)))
 4d0:	df 01       	movw	r26, r30
 4d2:	aa 0f       	add	r26, r26
 4d4:	bb 1f       	adc	r27, r27
 4d6:	aa 0f       	add	r26, r26
 4d8:	bb 1f       	adc	r27, r27
 4da:	a7 51       	subi	r26, 0x17	; 23
 4dc:	be 4f       	sbci	r27, 0xFE	; 254
 4de:	a8 0f       	add	r26, r24
 4e0:	b9 1f       	adc	r27, r25
 4e2:	2c 91       	ld	r18, X
 4e4:	21 30       	cpi	r18, 0x01	; 1
 4e6:	09 f4       	brne	.+2      	; 0x4ea <Game_process+0x5e>
 4e8:	c5 c0       	rjmp	.+394    	; 0x674 <Game_process+0x1e8>
 4ea:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <first_y>
 4ee:	32 13       	cpse	r19, r18
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <Game_process+0x70>
 4f2:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <first_x>
 4f6:	42 17       	cp	r20, r18
 4f8:	09 f4       	brne	.+2      	; 0x4fc <Game_process+0x70>
 4fa:	bc c0       	rjmp	.+376    	; 0x674 <Game_process+0x1e8>
	{ //카드 상태가 MATCH 이거나 직전에 선택한 카드와 같은 카드(짝 카드X, 진짜 그 카드)를 선택했을 때
		return;
	}
	
	print_FND_word(word_card[y][x]);
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	ee 0f       	add	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	8e 0f       	add	r24, r30
 506:	9f 1f       	adc	r25, r31
 508:	fc 01       	movw	r30, r24
 50a:	ee 0f       	add	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	e6 50       	subi	r30, 0x06	; 6
 510:	fe 4f       	sbci	r31, 0xFE	; 254
 512:	80 81       	ld	r24, Z
 514:	91 81       	ldd	r25, Z+1	; 0x01
 516:	0e 94 27 02 	call	0x44e	; 0x44e <print_FND_word>
	
	if(first_x == IS_NULL) {
 51a:	c0 91 2c 01 	lds	r28, 0x012C	; 0x80012c <first_x>
 51e:	c5 30       	cpi	r28, 0x05	; 5
 520:	69 f4       	brne	.+26     	; 0x53c <Game_process+0xb0>
		first_x = x; first_y = y; time_print_flag = 0;
 522:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <x>
 526:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <first_x>
 52a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <y>
 52e:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <first_y>
 532:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <time_print_flag>
		Keysound();
 536:	0e 94 28 04 	call	0x850	; 0x850 <Keysound>
 53a:	9c c0       	rjmp	.+312    	; 0x674 <Game_process+0x1e8>
	}
	else { //first_x == NOT_NULL
		if(!strcmp(word_card[first_y][first_x],word_card[y][x])) {
 53c:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <y>
 540:	00 91 f9 01 	lds	r16, 0x01F9	; 0x8001f9 <x>
 544:	10 e0       	ldi	r17, 0x00	; 0
 546:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <first_y>
 54a:	d0 e0       	ldi	r29, 0x00	; 0
 54c:	e9 2e       	mov	r14, r25
 54e:	f1 2c       	mov	r15, r1
 550:	f8 01       	movw	r30, r16
 552:	24 e0       	ldi	r18, 0x04	; 4
 554:	92 9f       	mul	r25, r18
 556:	e0 0d       	add	r30, r0
 558:	f1 1d       	adc	r31, r1
 55a:	11 24       	eor	r1, r1
 55c:	ee 0f       	add	r30, r30
 55e:	ff 1f       	adc	r31, r31
 560:	e6 50       	subi	r30, 0x06	; 6
 562:	fe 4f       	sbci	r31, 0xFE	; 254
 564:	60 81       	ld	r22, Z
 566:	71 81       	ldd	r23, Z+1	; 0x01
 568:	c8 2e       	mov	r12, r24
 56a:	d1 2c       	mov	r13, r1
 56c:	fe 01       	movw	r30, r28
 56e:	94 e0       	ldi	r25, 0x04	; 4
 570:	89 9f       	mul	r24, r25
 572:	e0 0d       	add	r30, r0
 574:	f1 1d       	adc	r31, r1
 576:	11 24       	eor	r1, r1
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	e6 50       	subi	r30, 0x06	; 6
 57e:	fe 4f       	sbci	r31, 0xFE	; 254
 580:	80 81       	ld	r24, Z
 582:	91 81       	ldd	r25, Z+1	; 0x01
 584:	0e 94 68 06 	call	0xcd0	; 0xcd0 <strcmp>
 588:	89 2b       	or	r24, r25
 58a:	09 f0       	breq	.+2      	; 0x58e <Game_process+0x102>
 58c:	5a c0       	rjmp	.+180    	; 0x642 <Game_process+0x1b6>
			state_card[first_y][first_x] = MATCH;
 58e:	c6 01       	movw	r24, r12
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	87 51       	subi	r24, 0x17	; 23
 59a:	9e 4f       	sbci	r25, 0xFE	; 254
 59c:	c8 0f       	add	r28, r24
 59e:	d9 1f       	adc	r29, r25
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	28 83       	st	Y, r18
			state_card[y][x] = MATCH;
 5a4:	c7 01       	movw	r24, r14
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	87 51       	subi	r24, 0x17	; 23
 5b0:	9e 4f       	sbci	r25, 0xFE	; 254
 5b2:	fc 01       	movw	r30, r24
 5b4:	e0 0f       	add	r30, r16
 5b6:	f1 1f       	adc	r31, r17
 5b8:	20 83       	st	Z, r18
			doorOpen();
 5ba:	0e 94 c7 03 	call	0x78e	; 0x78e <doorOpen>
 5be:	e9 ee       	ldi	r30, 0xE9	; 233
 5c0:	f1 e0       	ldi	r31, 0x01	; 1
			
			for(y = 0; y < 4; y++) {
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <Game_process+0x13e>
 5c8:	98 2f       	mov	r25, r24
 5ca:	df 01       	movw	r26, r30
				for(x = 0; x < 4; x++) {
					if(state_card[y][x] != MATCH) {
 5cc:	80 81       	ld	r24, Z
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <Game_process+0x148>
 5d2:	48 c0       	rjmp	.+144    	; 0x664 <Game_process+0x1d8>
 5d4:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <x>
 5d8:	30 93 1a 02 	sts	0x021A, r19	; 0x80021a <y>
 5dc:	0b c0       	rjmp	.+22     	; 0x5f4 <Game_process+0x168>
 5de:	13 96       	adiw	r26, 0x03	; 3
 5e0:	8c 91       	ld	r24, X
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	b1 f0       	breq	.+44     	; 0x612 <Game_process+0x186>
			state_card[first_y][first_x] = MATCH;
			state_card[y][x] = MATCH;
			doorOpen();
			
			for(y = 0; y < 4; y++) {
				for(x = 0; x < 4; x++) {
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	01 c0       	rjmp	.+2      	; 0x5ec <Game_process+0x160>
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <x>
 5f0:	30 93 1a 02 	sts	0x021A, r19	; 0x80021a <y>
					if(state_card[y][x] != MATCH) {
						FND_reflash_flag = 1;
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <FND_reflash_flag>
						show_time = 500;
 5fa:	24 ef       	ldi	r18, 0xF4	; 244
 5fc:	31 e0       	ldi	r19, 0x01	; 1
 5fe:	30 93 28 02 	sts	0x0228, r19	; 0x800228 <show_time+0x1>
 602:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <show_time>
						time_print_flag = 1;
 606:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <time_print_flag>
						first_x= IS_NULL;
 60a:	85 e0       	ldi	r24, 0x05	; 5
 60c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <first_x>
						return;
 610:	31 c0       	rjmp	.+98     	; 0x674 <Game_process+0x1e8>
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	89 0f       	add	r24, r25
 616:	34 96       	adiw	r30, 0x04	; 4
		if(!strcmp(word_card[first_y][first_x],word_card[y][x])) {
			state_card[first_y][first_x] = MATCH;
			state_card[y][x] = MATCH;
			doorOpen();
			
			for(y = 0; y < 4; y++) {
 618:	39 2f       	mov	r19, r25
 61a:	85 30       	cpi	r24, 0x05	; 5
 61c:	a9 f6       	brne	.-86     	; 0x5c8 <Game_process+0x13c>
 61e:	84 e0       	ldi	r24, 0x04	; 4
 620:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <x>
 624:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <y>
						return;
					}
				}
			}
			
			game_state = END;
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <game_state>
			FND_clock(sec, min);
 62e:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <min>
 632:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <sec>
 636:	0e 94 bb 00 	call	0x176	; 0x176 <FND_clock>
			//time_print_flag = 0;
			speakout_flag = 1;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <speakout_flag>
 640:	02 c0       	rjmp	.+4      	; 0x646 <Game_process+0x1ba>
			//next_beat_flag = 1;
		}
		else { //state_card == NOT_MATCH
			doorClose();
 642:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <doorClose>
			
		}
		FND_reflash_flag = 1;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <FND_reflash_flag>
		show_time = 500;
 64c:	24 ef       	ldi	r18, 0xF4	; 244
 64e:	31 e0       	ldi	r19, 0x01	; 1
 650:	30 93 28 02 	sts	0x0228, r19	; 0x800228 <show_time+0x1>
 654:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <show_time>
		time_print_flag = 1;
 658:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <time_print_flag>
		first_x= IS_NULL;
 65c:	85 e0       	ldi	r24, 0x05	; 5
 65e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <first_x>
 662:	08 c0       	rjmp	.+16     	; 0x674 <Game_process+0x1e8>
			state_card[y][x] = MATCH;
			doorOpen();
			
			for(y = 0; y < 4; y++) {
				for(x = 0; x < 4; x++) {
					if(state_card[y][x] != MATCH) {
 664:	21 81       	ldd	r18, Z+1	; 0x01
 666:	21 30       	cpi	r18, 0x01	; 1
 668:	09 f6       	brne	.-126    	; 0x5ec <Game_process+0x160>
 66a:	82 81       	ldd	r24, Z+2	; 0x02
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	09 f4       	brne	.+2      	; 0x672 <Game_process+0x1e6>
 670:	b6 cf       	rjmp	.-148    	; 0x5de <Game_process+0x152>
 672:	bb cf       	rjmp	.-138    	; 0x5ea <Game_process+0x15e>
		show_time = 500;
		time_print_flag = 1;
		first_x= IS_NULL;
	}
	return;
}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	df 90       	pop	r13
 682:	cf 90       	pop	r12
 684:	08 95       	ret

00000686 <onDraw>:
	OCR1A = 0;
	FND_reflash_flag = 1;
	return;
}

void onDraw(void) {
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
	
	static int i = 0;
	
	if(game_state == READY) {
 68a:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <game_state>
 68e:	81 11       	cpse	r24, r1
 690:	19 c0       	rjmp	.+50     	; 0x6c4 <onDraw+0x3e>
		FND_reflash_flag = 0;
 692:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <FND_reflash_flag>
		print_FND_word(start_info + i );
 696:	c0 91 e2 01 	lds	r28, 0x01E2	; 0x8001e2 <__data_end>
 69a:	d0 91 e3 01 	lds	r29, 0x01E3	; 0x8001e3 <__data_end+0x1>
 69e:	ce 01       	movw	r24, r28
 6a0:	83 5d       	subi	r24, 0xD3	; 211
 6a2:	9e 4f       	sbci	r25, 0xFE	; 254
 6a4:	0e 94 27 02 	call	0x44e	; 0x44e <print_FND_word>
		i++;
 6a8:	21 96       	adiw	r28, 0x01	; 1
		if(i>=13)i=0;
 6aa:	cd 30       	cpi	r28, 0x0D	; 13
 6ac:	d1 05       	cpc	r29, r1
 6ae:	2c f4       	brge	.+10     	; 0x6ba <onDraw+0x34>
	static int i = 0;
	
	if(game_state == READY) {
		FND_reflash_flag = 0;
		print_FND_word(start_info + i );
		i++;
 6b0:	d0 93 e3 01 	sts	0x01E3, r29	; 0x8001e3 <__data_end+0x1>
 6b4:	c0 93 e2 01 	sts	0x01E2, r28	; 0x8001e2 <__data_end>
 6b8:	1b c0       	rjmp	.+54     	; 0x6f0 <onDraw+0x6a>
		if(i>=13)i=0;
 6ba:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <__data_end+0x1>
 6be:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
 6c2:	16 c0       	rjmp	.+44     	; 0x6f0 <onDraw+0x6a>
	}
	
	else if(game_state == GAME) {
 6c4:	81 30       	cpi	r24, 0x01	; 1
 6c6:	a1 f4       	brne	.+40     	; 0x6f0 <onDraw+0x6a>
		i = 0;
 6c8:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <__data_end+0x1>
 6cc:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
		if(time_print_flag && !show_time) {
 6d0:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <time_print_flag>
 6d4:	88 23       	and	r24, r24
 6d6:	61 f0       	breq	.+24     	; 0x6f0 <onDraw+0x6a>
 6d8:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <show_time>
 6dc:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <show_time+0x1>
 6e0:	89 2b       	or	r24, r25
 6e2:	31 f4       	brne	.+12     	; 0x6f0 <onDraw+0x6a>
			FND_clock(sec, min);
 6e4:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <min>
 6e8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <sec>
 6ec:	0e 94 bb 00 	call	0x176	; 0x176 <FND_clock>
		}
	}
	
	return;
}
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	08 95       	ret

000006f6 <main>:
int main(void)
{
	int i = 0;
	char long_key_flag = 0;
    //초기화 순서도 중요
	Timer0_init(); //fnd 출력
 6f6:	0e 94 5e 05 	call	0xabc	; 0xabc <Timer0_init>
	Timer1_init_CTC_outA(); //speaker
 6fa:	0e 94 6c 05 	call	0xad8	; 0xad8 <Timer1_init_CTC_outA>
	FND4digit_init_shiftR(); //fnd 초기화
 6fe:	0e 94 ac 00 	call	0x158	; 0x158 <FND4digit_init_shiftR>
	Keypad_init();
 702:	0e 94 11 01 	call	0x222	; 0x222 <Keypad_init>
	sei();
 706:	78 94       	sei
char game_state = READY;

int main(void)
{
	int i = 0;
	char long_key_flag = 0;
 708:	c0 e0       	ldi	r28, 0x00	; 0
 70a:	d1 e0       	ldi	r29, 0x01	; 1
	sei();
	
	
    while (1) 
    {
		if(FND_reflash_flag) //FND 출력 갱신 //1초에 한번씩 ISR에서 갱신
 70c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <FND_reflash_flag>
 710:	88 23       	and	r24, r24
 712:	21 f0       	breq	.+8      	; 0x71c <main+0x26>
		{
			FND_reflash_flag = 0;
 714:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <FND_reflash_flag>
			onDraw();
 718:	0e 94 43 03 	call	0x686	; 0x686 <onDraw>
		}		
		
		if(long_key_flag)            
 71c:	cc 23       	and	r28, r28
 71e:	41 f1       	breq	.+80     	; 0x770 <main+0x7a>
		{
			if(Keyscan() != 'A')
 720:	0e 94 30 01 	call	0x260	; 0x260 <Keyscan>
 724:	81 34       	cpi	r24, 0x41	; 65
 726:	61 f1       	breq	.+88     	; 0x780 <main+0x8a>
 728:	8f e1       	ldi	r24, 0x1F	; 31
 72a:	93 e0       	ldi	r25, 0x03	; 3
 72c:	01 97       	sbiw	r24, 0x01	; 1
 72e:	f1 f7       	brne	.-4      	; 0x72c <main+0x36>
 730:	00 c0       	rjmp	.+0      	; 0x732 <main+0x3c>
 732:	00 00       	nop
			{
				_delay_us(200);
				if (Keyscan() != 'A')
 734:	0e 94 30 01 	call	0x260	; 0x260 <Keyscan>
 738:	81 34       	cpi	r24, 0x41	; 65
 73a:	11 f1       	breq	.+68     	; 0x780 <main+0x8a>
				{
					if(game_state == READY) Ready_process(Keyscan());
 73c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <game_state>
 740:	81 11       	cpse	r24, r1
 742:	06 c0       	rjmp	.+12     	; 0x750 <main+0x5a>
 744:	0e 94 30 01 	call	0x260	; 0x260 <Keyscan>
 748:	0e 94 03 02 	call	0x406	; 0x406 <Ready_process>
					else if(game_state == GAME) Game_process(Keyscan()); 
					else if(game_state == END) End_process(Keyscan()); 
					long_key_flag = 0;
 74c:	c0 e0       	ldi	r28, 0x00	; 0
 74e:	18 c0       	rjmp	.+48     	; 0x780 <main+0x8a>
			{
				_delay_us(200);
				if (Keyscan() != 'A')
				{
					if(game_state == READY) Ready_process(Keyscan());
					else if(game_state == GAME) Game_process(Keyscan()); 
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	31 f4       	brne	.+12     	; 0x760 <main+0x6a>
 754:	0e 94 30 01 	call	0x260	; 0x260 <Keyscan>
 758:	0e 94 46 02 	call	0x48c	; 0x48c <Game_process>
					else if(game_state == END) End_process(Keyscan()); 
					long_key_flag = 0;
 75c:	c0 e0       	ldi	r28, 0x00	; 0
 75e:	10 c0       	rjmp	.+32     	; 0x780 <main+0x8a>
				_delay_us(200);
				if (Keyscan() != 'A')
				{
					if(game_state == READY) Ready_process(Keyscan());
					else if(game_state == GAME) Game_process(Keyscan()); 
					else if(game_state == END) End_process(Keyscan()); 
 760:	82 30       	cpi	r24, 0x02	; 2
 762:	69 f4       	brne	.+26     	; 0x77e <main+0x88>
 764:	0e 94 30 01 	call	0x260	; 0x260 <Keyscan>
 768:	0e 94 11 02 	call	0x422	; 0x422 <End_process>
					long_key_flag = 0;
 76c:	c0 e0       	ldi	r28, 0x00	; 0
 76e:	08 c0       	rjmp	.+16     	; 0x780 <main+0x8a>
				}                                                  
			}
		}
		else
		{
			if(Keyscan() == 'A')
 770:	0e 94 30 01 	call	0x260	; 0x260 <Keyscan>
 774:	cd 2f       	mov	r28, r29
 776:	81 34       	cpi	r24, 0x41	; 65
 778:	19 f0       	breq	.+6      	; 0x780 <main+0x8a>
 77a:	c0 e0       	ldi	r28, 0x00	; 0
 77c:	01 c0       	rjmp	.+2      	; 0x780 <main+0x8a>
				if (Keyscan() != 'A')
				{
					if(game_state == READY) Ready_process(Keyscan());
					else if(game_state == GAME) Game_process(Keyscan()); 
					else if(game_state == END) End_process(Keyscan()); 
					long_key_flag = 0;
 77e:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 780:	8f e3       	ldi	r24, 0x3F	; 63
 782:	9c e9       	ldi	r25, 0x9C	; 156
 784:	01 97       	sbiw	r24, 0x01	; 1
 786:	f1 f7       	brne	.-4      	; 0x784 <main+0x8e>
 788:	00 c0       	rjmp	.+0      	; 0x78a <main+0x94>
 78a:	00 00       	nop
 78c:	bf cf       	rjmp	.-130    	; 0x70c <main+0x16>

0000078e <doorOpen>:
	return;
}

void doorOpen(void)
{
	OCR1A = F_CPU / 2 / 8 / RE_06;
 78e:	e8 e8       	ldi	r30, 0x88	; 136
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	87 ea       	ldi	r24, 0xA7	; 167
 794:	96 e0       	ldi	r25, 0x06	; 6
 796:	91 83       	std	Z+1, r25	; 0x01
 798:	80 83       	st	Z, r24
 79a:	2f ef       	ldi	r18, 0xFF	; 255
 79c:	81 ee       	ldi	r24, 0xE1	; 225
 79e:	94 e0       	ldi	r25, 0x04	; 4
 7a0:	21 50       	subi	r18, 0x01	; 1
 7a2:	80 40       	sbci	r24, 0x00	; 0
 7a4:	90 40       	sbci	r25, 0x00	; 0
 7a6:	e1 f7       	brne	.-8      	; 0x7a0 <doorOpen+0x12>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <doorOpen+0x1c>
 7aa:	00 00       	nop
	_delay_ms(100);
	OCR1A = F_CPU / 2 / 8 / SI_06;
 7ac:	84 ef       	ldi	r24, 0xF4	; 244
 7ae:	93 e0       	ldi	r25, 0x03	; 3
 7b0:	91 83       	std	Z+1, r25	; 0x01
 7b2:	80 83       	st	Z, r24
 7b4:	2f ef       	ldi	r18, 0xFF	; 255
 7b6:	81 ee       	ldi	r24, 0xE1	; 225
 7b8:	94 e0       	ldi	r25, 0x04	; 4
 7ba:	21 50       	subi	r18, 0x01	; 1
 7bc:	80 40       	sbci	r24, 0x00	; 0
 7be:	90 40       	sbci	r25, 0x00	; 0
 7c0:	e1 f7       	brne	.-8      	; 0x7ba <doorOpen+0x2c>
 7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <doorOpen+0x36>
 7c4:	00 00       	nop
	_delay_ms(100);
	OCR1A = F_CPU / 2 / 8 / SO_07;
 7c6:	8d e7       	ldi	r24, 0x7D	; 125
 7c8:	92 e0       	ldi	r25, 0x02	; 2
 7ca:	91 83       	std	Z+1, r25	; 0x01
 7cc:	80 83       	st	Z, r24
 7ce:	2f ef       	ldi	r18, 0xFF	; 255
 7d0:	81 ee       	ldi	r24, 0xE1	; 225
 7d2:	94 e0       	ldi	r25, 0x04	; 4
 7d4:	21 50       	subi	r18, 0x01	; 1
 7d6:	80 40       	sbci	r24, 0x00	; 0
 7d8:	90 40       	sbci	r25, 0x00	; 0
 7da:	e1 f7       	brne	.-8      	; 0x7d4 <doorOpen+0x46>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <doorOpen+0x50>
 7de:	00 00       	nop
	_delay_ms(100);
	OCR1A = 0;
 7e0:	11 82       	std	Z+1, r1	; 0x01
 7e2:	10 82       	st	Z, r1
 7e4:	08 95       	ret

000007e6 <doorClose>:
	return;
}

void doorClose(void)
{
	OCR1A = F_CPU / 2 / 8 / SI_07;
 7e6:	e8 e8       	ldi	r30, 0x88	; 136
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	2a ef       	ldi	r18, 0xFA	; 250
 7ec:	31 e0       	ldi	r19, 0x01	; 1
 7ee:	31 83       	std	Z+1, r19	; 0x01
 7f0:	20 83       	st	Z, r18
 7f2:	4f ef       	ldi	r20, 0xFF	; 255
 7f4:	51 ee       	ldi	r21, 0xE1	; 225
 7f6:	64 e0       	ldi	r22, 0x04	; 4
 7f8:	41 50       	subi	r20, 0x01	; 1
 7fa:	50 40       	sbci	r21, 0x00	; 0
 7fc:	60 40       	sbci	r22, 0x00	; 0
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <doorClose+0x12>
 800:	00 c0       	rjmp	.+0      	; 0x802 <doorClose+0x1c>
 802:	00 00       	nop
	_delay_ms(100);
	OCR1A = F_CPU / 2 / 8 / DO_07;
 804:	8b eb       	ldi	r24, 0xBB	; 187
 806:	93 e0       	ldi	r25, 0x03	; 3
 808:	91 83       	std	Z+1, r25	; 0x01
 80a:	80 83       	st	Z, r24
 80c:	4f ef       	ldi	r20, 0xFF	; 255
 80e:	51 ee       	ldi	r21, 0xE1	; 225
 810:	64 e0       	ldi	r22, 0x04	; 4
 812:	41 50       	subi	r20, 0x01	; 1
 814:	50 40       	sbci	r21, 0x00	; 0
 816:	60 40       	sbci	r22, 0x00	; 0
 818:	e1 f7       	brne	.-8      	; 0x812 <doorClose+0x2c>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <doorClose+0x36>
 81c:	00 00       	nop
	_delay_ms(100);
	OCR1A = F_CPU / 2 / 8 / SI_07;
 81e:	31 83       	std	Z+1, r19	; 0x01
 820:	20 83       	st	Z, r18
 822:	2f ef       	ldi	r18, 0xFF	; 255
 824:	31 ee       	ldi	r19, 0xE1	; 225
 826:	44 e0       	ldi	r20, 0x04	; 4
 828:	21 50       	subi	r18, 0x01	; 1
 82a:	30 40       	sbci	r19, 0x00	; 0
 82c:	40 40       	sbci	r20, 0x00	; 0
 82e:	e1 f7       	brne	.-8      	; 0x828 <doorClose+0x42>
 830:	00 c0       	rjmp	.+0      	; 0x832 <doorClose+0x4c>
 832:	00 00       	nop
	_delay_ms(100);
	OCR1A = F_CPU / 2 / 8 / DO_07;
 834:	91 83       	std	Z+1, r25	; 0x01
 836:	80 83       	st	Z, r24
 838:	5f ef       	ldi	r21, 0xFF	; 255
 83a:	61 ee       	ldi	r22, 0xE1	; 225
 83c:	84 e0       	ldi	r24, 0x04	; 4
 83e:	51 50       	subi	r21, 0x01	; 1
 840:	60 40       	sbci	r22, 0x00	; 0
 842:	80 40       	sbci	r24, 0x00	; 0
 844:	e1 f7       	brne	.-8      	; 0x83e <doorClose+0x58>
 846:	00 c0       	rjmp	.+0      	; 0x848 <doorClose+0x62>
 848:	00 00       	nop
	_delay_ms(100);
	OCR1A = 0;
 84a:	11 82       	std	Z+1, r1	; 0x01
 84c:	10 82       	st	Z, r1
 84e:	08 95       	ret

00000850 <Keysound>:
	return ;
}
void Keysound(void)
{
	OCR1A = 500;
 850:	e8 e8       	ldi	r30, 0x88	; 136
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	84 ef       	ldi	r24, 0xF4	; 244
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	91 83       	std	Z+1, r25	; 0x01
 85a:	80 83       	st	Z, r24
 85c:	2f ef       	ldi	r18, 0xFF	; 255
 85e:	81 ee       	ldi	r24, 0xE1	; 225
 860:	94 e0       	ldi	r25, 0x04	; 4
 862:	21 50       	subi	r18, 0x01	; 1
 864:	80 40       	sbci	r24, 0x00	; 0
 866:	90 40       	sbci	r25, 0x00	; 0
 868:	e1 f7       	brne	.-8      	; 0x862 <Keysound+0x12>
 86a:	00 c0       	rjmp	.+0      	; 0x86c <Keysound+0x1c>
 86c:	00 00       	nop
	_delay_ms(100);
	OCR1A = 0;
 86e:	11 82       	std	Z+1, r1	; 0x01
 870:	10 82       	st	Z, r1
 872:	08 95       	ret

00000874 <__vector_14>:
	//OCR0A = 63; // 2000Hz
	//OCR0A = 124;							//(250 / 2) - 1 //한 주기를 1msec
	//OCR0A = 249;							//한 주기 2msec //500Hz
	//250Hz를 만들고싶다면? => OCR0A를 늘리면 오버플로우(8bit) => 분주를 늘린다
	//CS0x (분주)랑 OCR값을 이용해서 주기, 주파수 조정
	TIMSK0 |= 1 << OCIE0A;                  //0b00000010; //어떤 interrupt 걸리게 할건지 정하는	// OC0A 비교 매치 인터럽트 활성화
 874:	1f 92       	push	r1
 876:	0f 92       	push	r0
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	0f 92       	push	r0
 87c:	11 24       	eor	r1, r1
 87e:	2f 93       	push	r18
 880:	3f 93       	push	r19
 882:	4f 93       	push	r20
 884:	5f 93       	push	r21
 886:	6f 93       	push	r22
 888:	7f 93       	push	r23
 88a:	8f 93       	push	r24
 88c:	9f 93       	push	r25
 88e:	af 93       	push	r26
 890:	bf 93       	push	r27
 892:	ef 93       	push	r30
 894:	ff 93       	push	r31
 896:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <time_reset_flag>
 89a:	88 23       	and	r24, r24
 89c:	61 f0       	breq	.+24     	; 0x8b6 <__vector_14+0x42>
 89e:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <time_reset_flag>
 8a2:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <msec+0x1>
 8a6:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <msec>
 8aa:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <sec>
 8ae:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <min>
 8b2:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <hour>
 8b6:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <show_time>
 8ba:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <show_time+0x1>
 8be:	89 2b       	or	r24, r25
 8c0:	49 f0       	breq	.+18     	; 0x8d4 <__vector_14+0x60>
 8c2:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <show_time>
 8c6:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <show_time+0x1>
 8ca:	01 97       	sbiw	r24, 0x01	; 1
 8cc:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <show_time+0x1>
 8d0:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <show_time>
 8d4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <speakout_flag>
 8d8:	88 23       	and	r24, r24
 8da:	09 f4       	brne	.+2      	; 0x8de <__vector_14+0x6a>
 8dc:	87 c0       	rjmp	.+270    	; 0x9ec <__stack+0xed>
 8de:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <interval>
 8e2:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <interval+0x1>
 8e6:	89 2b       	or	r24, r25
 8e8:	09 f0       	breq	.+2      	; 0x8ec <__vector_14+0x78>
 8ea:	73 c0       	rjmp	.+230    	; 0x9d2 <__stack+0xd3>
 8ec:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <next_beat_flag>
 8f0:	88 23       	and	r24, r24
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <__vector_14+0x82>
 8f4:	55 c0       	rjmp	.+170    	; 0x9a0 <__stack+0xa1>
 8f6:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <next_beat_flag>
 8fa:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <music_i>
 8fe:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <music_i+0x1>
 902:	ee 0f       	add	r30, r30
 904:	ff 1f       	adc	r31, r31
 906:	ef 57       	subi	r30, 0x7F	; 127
 908:	fe 4f       	sbci	r31, 0xFE	; 254
 90a:	80 81       	ld	r24, Z
 90c:	91 81       	ldd	r25, Z+1	; 0x01
 90e:	89 2b       	or	r24, r25
 910:	c9 f0       	breq	.+50     	; 0x944 <__stack+0x45>
 912:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <music_i>
 916:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <music_i+0x1>
 91a:	ee 0f       	add	r30, r30
 91c:	ff 1f       	adc	r31, r31
 91e:	ef 57       	subi	r30, 0x7F	; 127
 920:	fe 4f       	sbci	r31, 0xFE	; 254
 922:	20 81       	ld	r18, Z
 924:	31 81       	ldd	r19, Z+1	; 0x01
 926:	03 2e       	mov	r0, r19
 928:	00 0c       	add	r0, r0
 92a:	44 0b       	sbc	r20, r20
 92c:	55 0b       	sbc	r21, r21
 92e:	60 e4       	ldi	r22, 0x40	; 64
 930:	72 e4       	ldi	r23, 0x42	; 66
 932:	8f e0       	ldi	r24, 0x0F	; 15
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 90 05 	call	0xb20	; 0xb20 <__udivmodsi4>
 93a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 93e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 942:	04 c0       	rjmp	.+8      	; 0x94c <__stack+0x4d>
 944:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 948:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 94c:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <music_i>
 950:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <music_i+0x1>
 954:	ee 0f       	add	r30, r30
 956:	ff 1f       	adc	r31, r31
 958:	e1 5b       	subi	r30, 0xB1	; 177
 95a:	fe 4f       	sbci	r31, 0xFE	; 254
 95c:	80 81       	ld	r24, Z
 95e:	91 81       	ldd	r25, Z+1	; 0x01
 960:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <beat+0x1>
 964:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <beat>
 968:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <music_i>
 96c:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <music_i+0x1>
 970:	01 96       	adiw	r24, 0x01	; 1
 972:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <music_i+0x1>
 976:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <music_i>
 97a:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <music_i>
 97e:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <music_i+0x1>
 982:	ee 0f       	add	r30, r30
 984:	ff 1f       	adc	r31, r31
 986:	ef 57       	subi	r30, 0x7F	; 127
 988:	fe 4f       	sbci	r31, 0xFE	; 254
 98a:	80 81       	ld	r24, Z
 98c:	91 81       	ldd	r25, Z+1	; 0x01
 98e:	80 33       	cpi	r24, 0x30	; 48
 990:	9f 42       	sbci	r25, 0x2F	; 47
 992:	31 f4       	brne	.+12     	; 0x9a0 <__stack+0xa1>
 994:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <speakout_flag>
 998:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 99c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 9a0:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <beat>
 9a4:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <beat+0x1>
 9a8:	01 97       	sbiw	r24, 0x01	; 1
 9aa:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <beat+0x1>
 9ae:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <beat>
 9b2:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <beat>
 9b6:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <beat+0x1>
 9ba:	89 2b       	or	r24, r25
 9bc:	b9 f4       	brne	.+46     	; 0x9ec <__stack+0xed>
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <next_beat_flag>
 9c4:	8a e0       	ldi	r24, 0x0A	; 10
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <interval+0x1>
 9cc:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <interval>
 9d0:	0d c0       	rjmp	.+26     	; 0x9ec <__stack+0xed>
 9d2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 9d6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 9da:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <interval>
 9de:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <interval+0x1>
 9e2:	01 97       	sbiw	r24, 0x01	; 1
 9e4:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <interval+0x1>
 9e8:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <interval>
 9ec:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <msec>
 9f0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <msec+0x1>
 9f4:	01 96       	adiw	r24, 0x01	; 1
 9f6:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <msec+0x1>
 9fa:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <msec>
 9fe:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <msec>
 a02:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <msec+0x1>
 a06:	88 3e       	cpi	r24, 0xE8	; 232
 a08:	93 40       	sbci	r25, 0x03	; 3
 a0a:	44 f1       	brlt	.+80     	; 0xa5c <__stack+0x15d>
 a0c:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <msec+0x1>
 a10:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <msec>
 a14:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <sec>
 a18:	8f 5f       	subi	r24, 0xFF	; 255
 a1a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <sec>
 a1e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <sec>
 a22:	8c 33       	cpi	r24, 0x3C	; 60
 a24:	c0 f0       	brcs	.+48     	; 0xa56 <__stack+0x157>
 a26:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <sec>
 a2a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <min>
 a2e:	8f 5f       	subi	r24, 0xFF	; 255
 a30:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <min>
 a34:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <min>
 a38:	8c 33       	cpi	r24, 0x3C	; 60
 a3a:	68 f0       	brcs	.+26     	; 0xa56 <__stack+0x157>
 a3c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <min>
 a40:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <hour>
 a44:	8f 5f       	subi	r24, 0xFF	; 255
 a46:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <hour>
 a4a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <hour>
 a4e:	8c 30       	cpi	r24, 0x0C	; 12
 a50:	10 f0       	brcs	.+4      	; 0xa56 <__stack+0x157>
 a52:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <hour>
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <FND_reflash_flag>
 a5c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <i>
 a60:	8f 5f       	subi	r24, 0xFF	; 255
 a62:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <i>
 a66:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <i>
 a6a:	84 30       	cpi	r24, 0x04	; 4
 a6c:	10 f0       	brcs	.+4      	; 0xa72 <__stack+0x173>
 a6e:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <i>
 a72:	8b b1       	in	r24, 0x0b	; 11
 a74:	8f 70       	andi	r24, 0x0F	; 15
 a76:	8b b9       	out	0x0b, r24	; 11
 a78:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <i>
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	eb 51       	subi	r30, 0x1B	; 27
 a80:	fe 4f       	sbci	r31, 0xFE	; 254
 a82:	80 81       	ld	r24, Z
 a84:	0e 94 53 00 	call	0xa6	; 0xa6 <FND_shift_out>
 a88:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <i>
 a8c:	9b b1       	in	r25, 0x0b	; 11
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	ec 5f       	subi	r30, 0xFC	; 252
 a92:	fe 4f       	sbci	r31, 0xFE	; 254
 a94:	80 81       	ld	r24, Z
 a96:	89 2b       	or	r24, r25
 a98:	8b b9       	out	0x0b, r24	; 11
 a9a:	ff 91       	pop	r31
 a9c:	ef 91       	pop	r30
 a9e:	bf 91       	pop	r27
 aa0:	af 91       	pop	r26
 aa2:	9f 91       	pop	r25
 aa4:	8f 91       	pop	r24
 aa6:	7f 91       	pop	r23
 aa8:	6f 91       	pop	r22
 aaa:	5f 91       	pop	r21
 aac:	4f 91       	pop	r20
 aae:	3f 91       	pop	r19
 ab0:	2f 91       	pop	r18
 ab2:	0f 90       	pop	r0
 ab4:	0f be       	out	0x3f, r0	; 63
 ab6:	0f 90       	pop	r0
 ab8:	1f 90       	pop	r1
 aba:	18 95       	reti

00000abc <Timer0_init>:
 abc:	84 b5       	in	r24, 0x24	; 36
 abe:	82 60       	ori	r24, 0x02	; 2
 ac0:	84 bd       	out	0x24, r24	; 36
 ac2:	85 b5       	in	r24, 0x25	; 37
 ac4:	83 60       	ori	r24, 0x03	; 3
 ac6:	85 bd       	out	0x25, r24	; 37
 ac8:	89 ef       	ldi	r24, 0xF9	; 249
 aca:	87 bd       	out	0x27, r24	; 39
 acc:	ee e6       	ldi	r30, 0x6E	; 110
 ace:	f0 e0       	ldi	r31, 0x00	; 0
 ad0:	80 81       	ld	r24, Z
 ad2:	82 60       	ori	r24, 0x02	; 2
 ad4:	80 83       	st	Z, r24
 ad6:	08 95       	ret

00000ad8 <Timer1_init_CTC_outA>:
	return;
}

void Timer1_init_CTC_outA(void) //A 출력을 쓰기위한 초기화 함수
{
	DDRB |= 1 << PORTB1;
 ad8:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A |= 1 << COM1A0; //TOGGLE
 ada:	e0 e8       	ldi	r30, 0x80	; 128
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	80 81       	ld	r24, Z
 ae0:	80 64       	ori	r24, 0x40	; 64
 ae2:	80 83       	st	Z, r24
	TCCR1B |= 1 << WGM12 | 1 <<  CS11;  //CTC 모드//64분주
 ae4:	e1 e8       	ldi	r30, 0x81	; 129
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	80 81       	ld	r24, Z
 aea:	8a 60       	ori	r24, 0x0A	; 10
 aec:	80 83       	st	Z, r24
	OCR1A = 0; // 소리 끄기
 aee:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 af2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 af6:	08 95       	ret

00000af8 <__divmodhi4>:
 af8:	97 fb       	bst	r25, 7
 afa:	07 2e       	mov	r0, r23
 afc:	16 f4       	brtc	.+4      	; 0xb02 <__divmodhi4+0xa>
 afe:	00 94       	com	r0
 b00:	07 d0       	rcall	.+14     	; 0xb10 <__divmodhi4_neg1>
 b02:	77 fd       	sbrc	r23, 7
 b04:	09 d0       	rcall	.+18     	; 0xb18 <__divmodhi4_neg2>
 b06:	0e 94 b2 05 	call	0xb64	; 0xb64 <__udivmodhi4>
 b0a:	07 fc       	sbrc	r0, 7
 b0c:	05 d0       	rcall	.+10     	; 0xb18 <__divmodhi4_neg2>
 b0e:	3e f4       	brtc	.+14     	; 0xb1e <__divmodhi4_exit>

00000b10 <__divmodhi4_neg1>:
 b10:	90 95       	com	r25
 b12:	81 95       	neg	r24
 b14:	9f 4f       	sbci	r25, 0xFF	; 255
 b16:	08 95       	ret

00000b18 <__divmodhi4_neg2>:
 b18:	70 95       	com	r23
 b1a:	61 95       	neg	r22
 b1c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b1e <__divmodhi4_exit>:
 b1e:	08 95       	ret

00000b20 <__udivmodsi4>:
 b20:	a1 e2       	ldi	r26, 0x21	; 33
 b22:	1a 2e       	mov	r1, r26
 b24:	aa 1b       	sub	r26, r26
 b26:	bb 1b       	sub	r27, r27
 b28:	fd 01       	movw	r30, r26
 b2a:	0d c0       	rjmp	.+26     	; 0xb46 <__udivmodsi4_ep>

00000b2c <__udivmodsi4_loop>:
 b2c:	aa 1f       	adc	r26, r26
 b2e:	bb 1f       	adc	r27, r27
 b30:	ee 1f       	adc	r30, r30
 b32:	ff 1f       	adc	r31, r31
 b34:	a2 17       	cp	r26, r18
 b36:	b3 07       	cpc	r27, r19
 b38:	e4 07       	cpc	r30, r20
 b3a:	f5 07       	cpc	r31, r21
 b3c:	20 f0       	brcs	.+8      	; 0xb46 <__udivmodsi4_ep>
 b3e:	a2 1b       	sub	r26, r18
 b40:	b3 0b       	sbc	r27, r19
 b42:	e4 0b       	sbc	r30, r20
 b44:	f5 0b       	sbc	r31, r21

00000b46 <__udivmodsi4_ep>:
 b46:	66 1f       	adc	r22, r22
 b48:	77 1f       	adc	r23, r23
 b4a:	88 1f       	adc	r24, r24
 b4c:	99 1f       	adc	r25, r25
 b4e:	1a 94       	dec	r1
 b50:	69 f7       	brne	.-38     	; 0xb2c <__udivmodsi4_loop>
 b52:	60 95       	com	r22
 b54:	70 95       	com	r23
 b56:	80 95       	com	r24
 b58:	90 95       	com	r25
 b5a:	9b 01       	movw	r18, r22
 b5c:	ac 01       	movw	r20, r24
 b5e:	bd 01       	movw	r22, r26
 b60:	cf 01       	movw	r24, r30
 b62:	08 95       	ret

00000b64 <__udivmodhi4>:
 b64:	aa 1b       	sub	r26, r26
 b66:	bb 1b       	sub	r27, r27
 b68:	51 e1       	ldi	r21, 0x11	; 17
 b6a:	07 c0       	rjmp	.+14     	; 0xb7a <__udivmodhi4_ep>

00000b6c <__udivmodhi4_loop>:
 b6c:	aa 1f       	adc	r26, r26
 b6e:	bb 1f       	adc	r27, r27
 b70:	a6 17       	cp	r26, r22
 b72:	b7 07       	cpc	r27, r23
 b74:	10 f0       	brcs	.+4      	; 0xb7a <__udivmodhi4_ep>
 b76:	a6 1b       	sub	r26, r22
 b78:	b7 0b       	sbc	r27, r23

00000b7a <__udivmodhi4_ep>:
 b7a:	88 1f       	adc	r24, r24
 b7c:	99 1f       	adc	r25, r25
 b7e:	5a 95       	dec	r21
 b80:	a9 f7       	brne	.-22     	; 0xb6c <__udivmodhi4_loop>
 b82:	80 95       	com	r24
 b84:	90 95       	com	r25
 b86:	bc 01       	movw	r22, r24
 b88:	cd 01       	movw	r24, r26
 b8a:	08 95       	ret

00000b8c <random_r>:
 b8c:	8f 92       	push	r8
 b8e:	9f 92       	push	r9
 b90:	af 92       	push	r10
 b92:	bf 92       	push	r11
 b94:	cf 92       	push	r12
 b96:	df 92       	push	r13
 b98:	ef 92       	push	r14
 b9a:	ff 92       	push	r15
 b9c:	cf 93       	push	r28
 b9e:	df 93       	push	r29
 ba0:	ec 01       	movw	r28, r24
 ba2:	68 81       	ld	r22, Y
 ba4:	79 81       	ldd	r23, Y+1	; 0x01
 ba6:	8a 81       	ldd	r24, Y+2	; 0x02
 ba8:	9b 81       	ldd	r25, Y+3	; 0x03
 baa:	61 15       	cp	r22, r1
 bac:	71 05       	cpc	r23, r1
 bae:	81 05       	cpc	r24, r1
 bb0:	91 05       	cpc	r25, r1
 bb2:	21 f4       	brne	.+8      	; 0xbbc <random_r+0x30>
 bb4:	64 e2       	ldi	r22, 0x24	; 36
 bb6:	79 ed       	ldi	r23, 0xD9	; 217
 bb8:	8b e5       	ldi	r24, 0x5B	; 91
 bba:	97 e0       	ldi	r25, 0x07	; 7
 bbc:	2d e1       	ldi	r18, 0x1D	; 29
 bbe:	33 ef       	ldi	r19, 0xF3	; 243
 bc0:	41 e0       	ldi	r20, 0x01	; 1
 bc2:	50 e0       	ldi	r21, 0x00	; 0
 bc4:	0e 94 71 06 	call	0xce2	; 0xce2 <__divmodsi4>
 bc8:	49 01       	movw	r8, r18
 bca:	5a 01       	movw	r10, r20
 bcc:	9b 01       	movw	r18, r22
 bce:	ac 01       	movw	r20, r24
 bd0:	a7 ea       	ldi	r26, 0xA7	; 167
 bd2:	b1 e4       	ldi	r27, 0x41	; 65
 bd4:	0e 94 90 06 	call	0xd20	; 0xd20 <__muluhisi3>
 bd8:	6b 01       	movw	r12, r22
 bda:	7c 01       	movw	r14, r24
 bdc:	ac ee       	ldi	r26, 0xEC	; 236
 bde:	b4 ef       	ldi	r27, 0xF4	; 244
 be0:	a5 01       	movw	r20, r10
 be2:	94 01       	movw	r18, r8
 be4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__mulohisi3>
 be8:	dc 01       	movw	r26, r24
 bea:	cb 01       	movw	r24, r22
 bec:	8c 0d       	add	r24, r12
 bee:	9d 1d       	adc	r25, r13
 bf0:	ae 1d       	adc	r26, r14
 bf2:	bf 1d       	adc	r27, r15
 bf4:	b7 ff       	sbrs	r27, 7
 bf6:	03 c0       	rjmp	.+6      	; 0xbfe <random_r+0x72>
 bf8:	01 97       	sbiw	r24, 0x01	; 1
 bfa:	a1 09       	sbc	r26, r1
 bfc:	b0 48       	sbci	r27, 0x80	; 128
 bfe:	88 83       	st	Y, r24
 c00:	99 83       	std	Y+1, r25	; 0x01
 c02:	aa 83       	std	Y+2, r26	; 0x02
 c04:	bb 83       	std	Y+3, r27	; 0x03
 c06:	bc 01       	movw	r22, r24
 c08:	cd 01       	movw	r24, r26
 c0a:	9f 77       	andi	r25, 0x7F	; 127
 c0c:	df 91       	pop	r29
 c0e:	cf 91       	pop	r28
 c10:	ff 90       	pop	r15
 c12:	ef 90       	pop	r14
 c14:	df 90       	pop	r13
 c16:	cf 90       	pop	r12
 c18:	bf 90       	pop	r11
 c1a:	af 90       	pop	r10
 c1c:	9f 90       	pop	r9
 c1e:	8f 90       	pop	r8
 c20:	08 95       	ret

00000c22 <random>:
 c22:	8f 92       	push	r8
 c24:	9f 92       	push	r9
 c26:	af 92       	push	r10
 c28:	bf 92       	push	r11
 c2a:	cf 92       	push	r12
 c2c:	df 92       	push	r13
 c2e:	ef 92       	push	r14
 c30:	ff 92       	push	r15
 c32:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 c36:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 c3a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 c3e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 c42:	61 15       	cp	r22, r1
 c44:	71 05       	cpc	r23, r1
 c46:	81 05       	cpc	r24, r1
 c48:	91 05       	cpc	r25, r1
 c4a:	21 f4       	brne	.+8      	; 0xc54 <random+0x32>
 c4c:	64 e2       	ldi	r22, 0x24	; 36
 c4e:	79 ed       	ldi	r23, 0xD9	; 217
 c50:	8b e5       	ldi	r24, 0x5B	; 91
 c52:	97 e0       	ldi	r25, 0x07	; 7
 c54:	2d e1       	ldi	r18, 0x1D	; 29
 c56:	33 ef       	ldi	r19, 0xF3	; 243
 c58:	41 e0       	ldi	r20, 0x01	; 1
 c5a:	50 e0       	ldi	r21, 0x00	; 0
 c5c:	0e 94 71 06 	call	0xce2	; 0xce2 <__divmodsi4>
 c60:	49 01       	movw	r8, r18
 c62:	5a 01       	movw	r10, r20
 c64:	9b 01       	movw	r18, r22
 c66:	ac 01       	movw	r20, r24
 c68:	a7 ea       	ldi	r26, 0xA7	; 167
 c6a:	b1 e4       	ldi	r27, 0x41	; 65
 c6c:	0e 94 90 06 	call	0xd20	; 0xd20 <__muluhisi3>
 c70:	6b 01       	movw	r12, r22
 c72:	7c 01       	movw	r14, r24
 c74:	ac ee       	ldi	r26, 0xEC	; 236
 c76:	b4 ef       	ldi	r27, 0xF4	; 244
 c78:	a5 01       	movw	r20, r10
 c7a:	94 01       	movw	r18, r8
 c7c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__mulohisi3>
 c80:	dc 01       	movw	r26, r24
 c82:	cb 01       	movw	r24, r22
 c84:	8c 0d       	add	r24, r12
 c86:	9d 1d       	adc	r25, r13
 c88:	ae 1d       	adc	r26, r14
 c8a:	bf 1d       	adc	r27, r15
 c8c:	b7 ff       	sbrs	r27, 7
 c8e:	03 c0       	rjmp	.+6      	; 0xc96 <random+0x74>
 c90:	01 97       	sbiw	r24, 0x01	; 1
 c92:	a1 09       	sbc	r26, r1
 c94:	b0 48       	sbci	r27, 0x80	; 128
 c96:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 c9a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 c9e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 ca2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 ca6:	bc 01       	movw	r22, r24
 ca8:	cd 01       	movw	r24, r26
 caa:	9f 77       	andi	r25, 0x7F	; 127
 cac:	ff 90       	pop	r15
 cae:	ef 90       	pop	r14
 cb0:	df 90       	pop	r13
 cb2:	cf 90       	pop	r12
 cb4:	bf 90       	pop	r11
 cb6:	af 90       	pop	r10
 cb8:	9f 90       	pop	r9
 cba:	8f 90       	pop	r8
 cbc:	08 95       	ret

00000cbe <srandom>:
 cbe:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 cc2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 cc6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 cca:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 cce:	08 95       	ret

00000cd0 <strcmp>:
 cd0:	fb 01       	movw	r30, r22
 cd2:	dc 01       	movw	r26, r24
 cd4:	8d 91       	ld	r24, X+
 cd6:	01 90       	ld	r0, Z+
 cd8:	80 19       	sub	r24, r0
 cda:	01 10       	cpse	r0, r1
 cdc:	d9 f3       	breq	.-10     	; 0xcd4 <strcmp+0x4>
 cde:	99 0b       	sbc	r25, r25
 ce0:	08 95       	ret

00000ce2 <__divmodsi4>:
 ce2:	05 2e       	mov	r0, r21
 ce4:	97 fb       	bst	r25, 7
 ce6:	1e f4       	brtc	.+6      	; 0xcee <__divmodsi4+0xc>
 ce8:	00 94       	com	r0
 cea:	0e 94 88 06 	call	0xd10	; 0xd10 <__negsi2>
 cee:	57 fd       	sbrc	r21, 7
 cf0:	07 d0       	rcall	.+14     	; 0xd00 <__divmodsi4_neg2>
 cf2:	0e 94 90 05 	call	0xb20	; 0xb20 <__udivmodsi4>
 cf6:	07 fc       	sbrc	r0, 7
 cf8:	03 d0       	rcall	.+6      	; 0xd00 <__divmodsi4_neg2>
 cfa:	4e f4       	brtc	.+18     	; 0xd0e <__divmodsi4_exit>
 cfc:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__negsi2>

00000d00 <__divmodsi4_neg2>:
 d00:	50 95       	com	r21
 d02:	40 95       	com	r20
 d04:	30 95       	com	r19
 d06:	21 95       	neg	r18
 d08:	3f 4f       	sbci	r19, 0xFF	; 255
 d0a:	4f 4f       	sbci	r20, 0xFF	; 255
 d0c:	5f 4f       	sbci	r21, 0xFF	; 255

00000d0e <__divmodsi4_exit>:
 d0e:	08 95       	ret

00000d10 <__negsi2>:
 d10:	90 95       	com	r25
 d12:	80 95       	com	r24
 d14:	70 95       	com	r23
 d16:	61 95       	neg	r22
 d18:	7f 4f       	sbci	r23, 0xFF	; 255
 d1a:	8f 4f       	sbci	r24, 0xFF	; 255
 d1c:	9f 4f       	sbci	r25, 0xFF	; 255
 d1e:	08 95       	ret

00000d20 <__muluhisi3>:
 d20:	0e 94 a3 06 	call	0xd46	; 0xd46 <__umulhisi3>
 d24:	a5 9f       	mul	r26, r21
 d26:	90 0d       	add	r25, r0
 d28:	b4 9f       	mul	r27, r20
 d2a:	90 0d       	add	r25, r0
 d2c:	a4 9f       	mul	r26, r20
 d2e:	80 0d       	add	r24, r0
 d30:	91 1d       	adc	r25, r1
 d32:	11 24       	eor	r1, r1
 d34:	08 95       	ret

00000d36 <__mulshisi3>:
 d36:	b7 ff       	sbrs	r27, 7
 d38:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__muluhisi3>

00000d3c <__mulohisi3>:
 d3c:	0e 94 90 06 	call	0xd20	; 0xd20 <__muluhisi3>
 d40:	82 1b       	sub	r24, r18
 d42:	93 0b       	sbc	r25, r19
 d44:	08 95       	ret

00000d46 <__umulhisi3>:
 d46:	a2 9f       	mul	r26, r18
 d48:	b0 01       	movw	r22, r0
 d4a:	b3 9f       	mul	r27, r19
 d4c:	c0 01       	movw	r24, r0
 d4e:	a3 9f       	mul	r26, r19
 d50:	70 0d       	add	r23, r0
 d52:	81 1d       	adc	r24, r1
 d54:	11 24       	eor	r1, r1
 d56:	91 1d       	adc	r25, r1
 d58:	b2 9f       	mul	r27, r18
 d5a:	70 0d       	add	r23, r0
 d5c:	81 1d       	adc	r24, r1
 d5e:	11 24       	eor	r1, r1
 d60:	91 1d       	adc	r25, r1
 d62:	08 95       	ret

00000d64 <_exit>:
 d64:	f8 94       	cli

00000d66 <__stop_program>:
 d66:	ff cf       	rjmp	.-2      	; 0xd66 <__stop_program>
